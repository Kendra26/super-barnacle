name: Textdoc Download to Main to Gofile

on:
  push:
    branches:
      - Main
  workflow_dispatch:

jobs:
  torrent-upload:
    runs-on: ubuntu-latest
    env:
      PIXELDRAIN_API_KEY: '8ec6f000-e8d1-403d-820b-4324a6a68869'  # Replace with your actual API key
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Fetch download links
        run: |
          curl -s https://textdoc.co/5xvG5PnuTb838mhsX | grep -oP 'magnet:\S+|https?://\S+\.(mp4|mkv|avi|srt)' > download_links.txt

      - name: Fetch filenames
        run: |
          curl -s https://textdoc.co/5xvG5PnuTb838mhsX | awk '/Start/{flag=1; next} /Stop/{flag=0} flag' > filenames.txt

      - name: Download Files
        run: |
          mkdir -p downloads
          wget --content-disposition --no-check-certificate -P downloads -i download_links.txt

      - name: Process links and filenames
        run: |
          # Read links and filenames into arrays
          mapfile -t links < download_links.txt
          mapfile -t filenames < filenames.txt

          for i in "${!links[@]}"; do
            link="${links[$i]}"
            filename="${filenames[$i]}"

            # Skip magnet links
            if [[ "$link" == magnet:* ]]; then
              echo "Skipping magnet link: $link"
              continue
            fi

            # Skip if filename is empty
            if [[ -z "$filename" ]]; then
              echo "No filename specified for link: $link, skipping."
              continue
            fi

            # Determine the expected filename for the downloaded file
            original_file="./downloads/$(basename "$link")"

            # Wait for the file to exist (in case wget hasn't finished)
            retries=0
            while [[ ! -f "$original_file" && $retries -lt 10 ]]; do
              sleep 1
              retries=$((retries + 1))
            done

            if [[ -f "$original_file" ]]; then
              mv "$original_file" "./downloads/$filename"
              echo "Renamed '$original_file' to './downloads/$filename'"
            else
              echo "File '$original_file' not found after waiting, skipping."
            fi
          done

      - name: Upload all files to Gofile with folderId
        run: |
          FOLDER_ID="your_folder_id_here"  # Replace with your actual folderId
          API_TOKEN="YOUR_API_TOKEN"        # Replace with your Gofile API token
          
          find ./downloads -type f \( -iname "*.avi" -o -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.srt" \) -print0 | while IFS= read -r -d '' file; do
            echo "Uploading $file..."
            curl -g -X POST "https://upload.gofile.io/uploadFile" \
              -H "Authorization: Bearer $API_TOKEN" \
              -F "file=@\"$file\"" \
              -F "folderId=$FOLDER_ID"
          done
