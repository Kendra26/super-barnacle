name: Textdoc Download to Main to Gofile

on:
  push:
    branches:
      - Main  # Corrected branch name
  workflow_dispatch:

jobs:
  torrent-upload:
    runs-on: ubuntu-latest
    env:
      PIXELDRAIN_API_KEY: '8ec6f000-e8d1-403d-820b-4324a6a68869'  # Replace with your actual API key
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Fetch download links
        run: |
          curl -s https://textdoc.co/5xvG5PnuTb838mhsX | grep -oP 'magnet:\S+|https?://\S+\.(mp4|mkv|avi|srt)' > download_links.txt

      - name: Fetch filenames
        run: |
          curl -s https://textdoc.co/5xvG5PnuTb838mhsX | awk '/Start/{flag=1; next} /Stop/{flag=0} flag' > filenames.txt

      - name: Process links and filenames
        run: |
          # Read links and filenames into arrays
          mapfile -t links < download_links.txt
          mapfile -t filenames < filenames.txt

          mkdir -p downloads

          for i in "${!links[@]}"; do
            link="${links[$i]}"
            filename="${filenames[$i]}"

            if [[ "$link" == magnet:* ]]; then
              echo "Skipping magnet link: $link"
              continue
            fi

            # Skip if filename is empty
            if [[ -z "$filename" ]]; then
              echo "No filename specified for link: $link, using --content-disposition."
              # Download with content-disposition
              wget --content-disposition -O "./downloads/$i" "$link"
              # Rename the downloaded file later
              filename="./downloads/$(ls ./downloads | tail -n1)"
            else
              # Download with specified filename
              echo "Downloading $link as $filename..."
              wget -O "./downloads/$filename" "$link"
            fi

            # Verify download
            if [[ -f "./downloads/$filename" ]]; then
              echo "Downloaded $filename successfully."
            else
              echo "Failed to download $link"
            fi
          done
          
      - name: Upload all downloaded files (recursive)
        run: |
           find ./downloads -type f \( -iname "*.avi" -o -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.srt" \) -print0 | while IFS= read -r -d '' file; do
             curl -g -X POST "https://upload.gofile.io/uploadfile" \
             -H "Authorization: Bearer djsj" \
             -F "file=@\"$file\"" \
             -F "folderId=33072955-da61-4062-"
           done
